//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   int tot_args;
   int offset;
   boolean mov_flag = false;
   R mov_reg;

   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
      {
        R lab = n.node.accept(this);
        if(lab != null)
        System.out.println(lab+":");
        return lab;
      }

      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      int n1 = Integer.parseInt(String.valueOf(n.f2.accept(this)));
      n.f3.accept(this);
      n.f4.accept(this);
      int n2 = Integer.parseInt(String.valueOf(n.f5.accept(this)));
      n.f6.accept(this);
      n.f7.accept(this);
      int n3 = Integer.parseInt(String.valueOf(n.f8.accept(this)));
      int st_space = 4*n2 + 4;
      if(n3 > 4)
        st_space += (n3 - 4)*4;
      if(n1 > 4)
        tot_args = n1-4;
      else
        tot_args = 0;

      System.out.println("           .text");
      System.out.println(".globl           main");
      System.out.println("main:");
      System.out.println("move $fp, $sp");
      System.out.println("subu $sp, $sp, "+ st_space);
      System.out.println("sw $ra, -4($fp)");

      if(n3 > 4)
        offset = (n3-4)*4;
      else
        offset = 0;

      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      System.out.println("lw $ra, -4($fp)");
      System.out.println("addu $sp, $sp, "+st_space);
      System.out.println("j $ra");
      n.f12.accept(this);
      n.f13.accept(this);
      n.f14.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n) {
      R _ret=null;
      R lab = n.f0.accept(this);
      n.f1.accept(this);
      int n1 = Integer.parseInt(String.valueOf(n.f2.accept(this)));
      n.f3.accept(this);
      n.f4.accept(this);
      int n2 = Integer.parseInt(String.valueOf(n.f5.accept(this)));
      n.f6.accept(this);
      n.f7.accept(this);
      int n3 = Integer.parseInt(String.valueOf(n.f8.accept(this)));

      int st_space = 4*n2 + 8;
      if(n3 > 4)
        st_space += (n3 - 4)*4;

      if(n1 > 4)
        tot_args = n1-4;
      else
        tot_args = 0;

      System.out.println("           .text");
      System.out.println(".globl           "+lab);
      System.out.println(lab+":");
      System.out.println("sw $fp, -8($sp)");
      System.out.println("move $fp, $sp");
      System.out.println("subu $sp, $sp, "+ st_space);
      System.out.println("sw $ra, -4($fp)");

      if(n3 > 4)
        offset = (n3-4)*4;
      else
        offset = 0;

      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      System.out.println("lw $ra, -4($fp)");
      System.out.println("lw $fp, "+(st_space-8)+"($sp)");
      System.out.println("addu $sp, $sp, "+st_space);
      System.out.println("j $ra");
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      System.out.println("nop");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n) {
      R _ret=null;
      n.f0.accept(this);
     System.out.println("li $v0, 4");
     System.out.println("la $a0, str_er");
     System.out.println("syscall");
     System.out.println("li $v0, 10");
     System.out.println("syscall");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      R reg = n.f1.accept(this);
      R lab = n.f2.accept(this);
      System.out.println("beqz "+reg+" "+lab);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      R lab = n.f1.accept(this);
      System.out.println("b "+lab);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n) {
      R _ret=null;
      n.f0.accept(this);
      R reg1 = n.f1.accept(this);
      int i = Integer.parseInt(String.valueOf(n.f2.accept(this)));
      R reg2 = n.f3.accept(this);
      System.out.println("sw "+reg2+", "+i+"("+reg1+")");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n) {
      R _ret=null;
      n.f0.accept(this);
      R reg1 = n.f1.accept(this);
      R reg2 = n.f2.accept(this);
      R i = n.f3.accept(this);
      System.out.println("lw "+reg1+" "+i+"("+reg2+")");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n) {
      R _ret=null;
      n.f0.accept(this);
      R reg = n.f1.accept(this);
      mov_reg = reg;
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n) {
      R _ret=null;
      n.f0.accept(this);
      R sexp = n.f1.accept(this);
      System.out.println("move $a0 "+sexp);
      System.out.println("jal _print");
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n) {
      R _ret=null;
      n.f0.accept(this);
      R reg = n.f1.accept(this);
      int i = Integer.parseInt(String.valueOf(n.f2.accept(this)));
      if(i < tot_args)
        System.out.println("lw "+reg+", "+(i*4)+"($fp)");
      else
        System.out.println("lw "+reg+", "+(i*4 + offset)+ "($sp)");

      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n) {
      R _ret=null;
      n.f0.accept(this);
      int i = Integer.parseInt(String.valueOf(n.f1.accept(this)));
      R reg = n.f2.accept(this);


      if(i < tot_args)
        System.out.println("sw "+reg+", "+(i*4)+"($fp)");
      else
        System.out.println("sw "+reg+", "+(i*4 + offset)+ "($sp)");

      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n) {
      R _ret=null;
      n.f0.accept(this);
      int i = Integer.parseInt(String.valueOf(n.f1.accept(this)));
      R reg = n.f2.accept(this);
      System.out.println("sw "+reg+", "+(i-1)*4+"($sp)");
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n) {
      R _ret=null;
      n.f0.accept(this);
      R sexp = n.f1.accept(this);
      System.out.println("jalr "+sexp);
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n) {
      R _ret=null;
      if(n.f0.which == 2)
        mov_flag = true;
      n.f0.accept(this);
      if(n.f0.which == 2)
        mov_flag = false;
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n) {
      R _ret=null;
      n.f0.accept(this);
      R sexp = n.f1.accept(this);
      if(n.f1.f0.which == 0)
        System.out.println("move $a0 "+sexp);
      else if(n.f1.f0.which == 1)
        System.out.println("li $a0 "+sexp);
      else if(n.f1.f0.which == 2)
        System.out.println("la $a0 "+sexp);

      System.out.println("jal _halloc");
      System.out.println("move "+mov_reg+" $v0");
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n) {
      R _ret=null;
      n.f0.accept(this);
      R reg = n.f1.accept(this);
      R sexp = n.f2.accept(this);

      if(n.f0.f0.which == 0)
      {
        if(n.f2.f0.which == 0)
          System.out.println("sle "+mov_reg+", "+reg+", "+sexp);
        if(n.f2.f0.which == 1)
          System.out.println("slei "+mov_reg+", "+reg+", "+sexp);
      }
      else if(n.f0.f0.which == 1)
        System.out.println("sne "+mov_reg+", "+reg+", "+sexp);
      else if(n.f0.f0.which == 2)
        System.out.println("add  "+mov_reg+", "+reg+", "+sexp);
      else if(n.f0.f0.which == 3)
        System.out.println("sub "+mov_reg+", "+reg+", "+sexp);
      else if(n.f0.f0.which == 4)
          System.out.println("mul "+mov_reg+", "+reg+", "+sexp);
      else if(n.f0.f0.which == 5)
          System.out.println("div "+mov_reg+", "+reg+", "+sexp);

      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n) {
      R _ret=null;
      n.f0.accept(this);
      R i = n.f1.accept(this);
      return i;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n) {
      R sexp = n.f0.accept(this);
      if(mov_flag)
      {
        if(n.f0.which == 0)
        {
          System.out.println("move "+mov_reg+" "+sexp);
        }
        else if(n.f0.which == 1)
        {
          System.out.println("li "+mov_reg+" "+sexp);
        }
        else if(n.f0.which == 2)
        {
          System.out.println("la "+mov_reg+" "+sexp);
        }
      }
      return sexp;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n) {
      R _ret = n.f0.accept(this);
      String s = "$" + String.valueOf(_ret);
      return (R)s;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret = n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n) {
      R _ret=n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

}
