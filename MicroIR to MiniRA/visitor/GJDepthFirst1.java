//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst1<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   class Checkregspill{
    boolean isSpilled;
    int spill_loc;
    Checkregspill(){
      this.isSpilled = false;
      this.spill_loc = -1;
    }
   }

   HashMap<String,HashMap<String,ArrayList<regstatus>>> Proc_RegStatus = new HashMap<String,HashMap<String,ArrayList<regstatus>>>();
   HashMap<String,Integer> Proc_maxcallnum = new HashMap<String,Integer>();
   String currProcname;
   boolean addtmp;
   Integer labelflag;
   Integer spillstackind;

  public String getReg(String fname,String tmp, Integer vflag, Checkregspill check){
    HashMap<String,ArrayList<regstatus>> reghm = Proc_RegStatus.get(fname);
    ArrayList<regstatus> allocd = reghm.get("allocated");
    ArrayList<regstatus> spilld = reghm.get("spilled");
    for(regstatus reg_ad: allocd){
      if((reg_ad.tmp).equals(tmp)){
        String reg_allocd = reg_ad.reg;
        return reg_allocd;
      }
    }
    for(regstatus reg_sd: spilld){
      if((reg_sd.tmp).equals(tmp)){
        int spill_loc = reg_sd.loc;
        check.isSpilled = true;
        spill_loc += spillstackind;
        check.spill_loc = spill_loc;
        if(vflag != -1 && vflag != 3){
          System.out.println("  ALOAD v"+vflag+" SPILLEDARG "+spill_loc+"\n");
        }
        if(vflag == 3){vflag = 1;}
        return ("v"+vflag.toString());
      }
    }
    return "NULL";
   }

   public GJDepthFirst1(Maps map){
    this.Proc_RegStatus = map.AssReg();
    this.Proc_maxcallnum = map.AssCallarg();
    this.currProcname = "";
    this.addtmp = false;
    this.spillstackind  = 0 ;
    this.labelflag = 0;
   }

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            labelflag = 1;
            e.nextElement().accept(this,argu);
            labelflag = 0;
            _count++;
         }
         return _ret;
      }
      else{
        labelflag = 0;
         return null;
       }
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() ){
        labelflag = 1;
        return n.node.accept(this,argu);
      }
      else{
        labelflag = 0;
        return null;
      }
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      currProcname = "MAIN";
      HashMap<String,ArrayList<regstatus>> hmreg = Proc_RegStatus.get(currProcname);
      Integer spillnum = (hmreg.get("spilled")).size();
      int pmax = 0;
      if(Proc_maxcallnum.containsKey(currProcname)){
        pmax = Proc_maxcallnum.get(currProcname);
      }
      System.out.println("MAIN [0]["+((Integer)(spillnum+18)).toString()+"]["+pmax+"]\n");
      spillstackind = 18;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      currProcname = "";
      System.out.println("\nEND\n");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println("\n// Number of  vars after packing = 0; Number of Spilled vars = 0");
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      labelflag = 1;
      n.f0.accept(this, argu);
      labelflag = 0;
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      String lab = n.f0.f0.toString();
      currProcname = lab;
      n.f1.accept(this, argu);
      int numargs = Integer.parseInt(n.f2.f0.toString());
      HashMap<String,ArrayList<regstatus>> hmreg = Proc_RegStatus.get(currProcname);
      Integer spillnum = (hmreg.get("spilled")).size();
      int extraargs = 0,i;
      if(numargs>4){
        extraargs = numargs - 4;
      }
      int pmax = 0;
      if(Proc_maxcallnum.containsKey(currProcname)){
        pmax = Proc_maxcallnum.get(currProcname);
      }
      System.out.println(lab+" ["+numargs+"]["+((Integer)(spillnum+18+extraargs)).toString()+"]["+pmax+"]\n");
      spillstackind = 18+extraargs;
      for(i=0;i<8;i++){
        System.out.println("  ASTORE SPILLEDARG "+(i+extraargs)+" s"+i);
      }
      for(i=0;i<10;i++){
        System.out.println("  ASTORE SPILLEDARG "+(i+extraargs+8)+" t"+i);
      }
      for(i=0;i<4 &&i<numargs;i++){
          String ftemp = "TEMP "+((Integer)i).toString();
          Checkregspill check_ft = new Checkregspill();
          //System.out.println("------------------------------------ "+ftemp);
          String ftemp_reg = getReg(currProcname,ftemp,3,check_ft);
          //System.out.println("------------------------------------!!! "+ftemp_reg);
          if(!ftemp_reg.equals("NULL")){
            if(check_ft.isSpilled == false){
              System.out.println("  MOVE "+ftemp_reg+" a"+i);
            }
            else{
              System.out.println("  MOVE "+ftemp_reg+" a"+i);
              System.out.println("  ASTORE SPILLEDARG "+check_ft.spill_loc+" "+ftemp_reg);
            }
          }
      }
      if(extraargs != 0){
        for(i=4;i<(4+extraargs);i++){
          String ftemp = "TEMP "+((Integer)i).toString();
          Checkregspill check_ft1 = new Checkregspill();
          String ftemp_reg = getReg(currProcname,ftemp,3,check_ft1);
          if(!ftemp_reg.equals("NULL")){
            if(check_ft1.isSpilled == false){
              System.out.println("  ALOAD "+ftemp_reg+" SPILLEDARG "+(i-4));
            }
            else{
              System.out.println("  ALOAD "+ftemp_reg+" SPILLEDARG "+(i-4)); 
              System.out.println("  ASTORE SPILLEDARG "+check_ft1.spill_loc+" "+ftemp_reg);
            }
          }   
        }
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      for(i=0;i<8;i++){
        System.out.println("  ALOAD s"+i+" SPILLEDARG "+(i+extraargs));
      }
      for(i=0;i<10;i++){
        System.out.println("  ALOAD t"+i+" SPILLEDARG "+(i+extraargs+8));
      }
      System.out.println("\nEND\n");
      currProcname = "";
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("  NOOP");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("  ERROR");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String tmp = n.f1.accept(this, argu).toString();
      String lab = n.f2.accept(this, argu).toString();
      String tmp_reg = getReg(currProcname,tmp,1,new Checkregspill());
      System.out.println("  CJUMP "+tmp_reg+" "+lab);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String lab = n.f1.f0.toString();
      System.out.println("  JUMP "+lab);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String tmp1 = n.f1.accept(this, argu).toString();
      String lit = n.f2.accept(this, argu).toString();
      String tmp2 = n.f3.accept(this, argu).toString();
      String tmpreg1 = getReg(currProcname,tmp1,0,new Checkregspill());
      String tmpreg2 = getReg(currProcname,tmp2,1,new Checkregspill());
      System.out.println("  HSTORE "+tmpreg1+" "+lit+" "+tmpreg2);
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String tmp1 = n.f1.accept(this, argu).toString();
      String tmp2 = n.f2.accept(this, argu).toString();
      String lit = n.f3.accept(this, argu).toString();
      Checkregspill check1 =  new Checkregspill();
      Checkregspill check2 =  new Checkregspill();
      String tmpreg1 = getReg(currProcname,tmp1,0,check1);
      String tmpreg2 = getReg(currProcname,tmp2,0,check2);
      System.out.println("  HLOAD "+tmpreg1+" "+tmpreg2+" "+lit);
      if(check1.isSpilled == true){
        System.out.println("  ASTORE SPILLEDARG "+check1.spill_loc+" "+tmpreg1);
      }
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String tmp1 = n.f1.accept(this, argu).toString();
      String tmpreg1 = getReg(currProcname,tmp1,1,new Checkregspill());
      if(!(tmpreg1.equals("NULL"))){
        n.f2.accept(this, (A)tmp1);
      }
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String tmpreg = n.f1.accept(this, argu).toString();
      System.out.println("  PRINT "+tmpreg);
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      String tmp1 = (String)argu;
      if(n.f0.which == 0){
        Checkregspill check1 = new Checkregspill();
        String tmpreg1 = getReg(currProcname,tmp1,-1,check1);
        if(check1.isSpilled){
          System.out.println("  ASTORE SPILLEDARG "+check1.spill_loc+" v0");
        }
        else{
          System.out.println("  MOVE "+tmpreg1+" v0");
        }
      }
      if(n.f0.which == 3){
        String tmpreg2 = _ret.toString();  
        Checkregspill check1 = new Checkregspill();
        String tmpreg1 = getReg(currProcname,tmp1,-1,check1);
        if(check1.isSpilled){
          System.out.println("  ASTORE SPILLEDARG "+check1.spill_loc+" "+tmpreg2);
        }
        else{
          System.out.println("  MOVE "+tmpreg1+" "+tmpreg2);
        }
      }
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String tmpreg = n.f3.accept(this, argu).toString();
      System.out.println("  MOVE v0 "+tmpreg+"\n");
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String smpreg = n.f1.accept(this, argu).toString();
      n.f2.accept(this, argu);
      ArrayList<String> temps = new ArrayList<String>();
      addtmp = true;
      n.f3.accept(this, (A)temps);
      addtmp = false;
      n.f4.accept(this, argu);
      int count = 0;
      for(String tmp: temps){
        Checkregspill check = new Checkregspill();
        String tmpreg = getReg(currProcname,tmp,0,check);
        if(count<=3){
          System.out.println("  MOVE a"+count+" "+tmpreg);
        }
        else{
          System.out.println("  PASSARG "+(count-3)+" "+tmpreg);
        }
        count += 1;
      }
      System.out.println("  CALL "+smpreg);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      String tmp1 = (String)argu;
      Checkregspill check1 = new Checkregspill();
      String tmpreg1 = getReg(currProcname,tmp1,0,check1);
      n.f0.accept(this, argu);
      String tmpreg2 = n.f1.accept(this, argu).toString();
      System.out.println("  MOVE "+tmpreg1+" HALLOCATE "+tmpreg2);
      if(check1.isSpilled){
        System.out.println("  ASTORE SPILLEDARG "+check1.spill_loc+ " "+tmpreg1);
      }
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String tmp1 = (String)argu;
      String op = n.f0.accept(this, argu).toString();
      String tmpreg3 = "NULL";
      if(op.equals("NE")){
        //t<s + t>s 
        tmpreg3 = n.f2.accept(this, argu).toString();
        String tmp2 = n.f1.accept(this, argu).toString();
        Checkregspill check2 = new Checkregspill();
        String tmpreg2 = getReg(currProcname,tmp2,0,check2);
        Checkregspill check1 = new Checkregspill();
        String tmpreg1 = getReg(currProcname,tmp1,-1,check1);
        System.out.println("  MOVE v0 LT "+tmpreg2+" "+tmpreg3);
        System.out.println("  MOVE v1 LT "+tmpreg3+" "+tmpreg2);
        if(check1.isSpilled){
          System.out.println("  MOVE v0 PLUS v0 v1"+"\n"+"  ASTORE SPILLEDARG "+check1.spill_loc+" v0");
        }
        else{
          System.out.println("  MOVE "+tmpreg1+" PLUS v0 v1");
        }
      }
      else{
        if(op.equals("LE")){
          tmpreg3 = n.f2.accept(this, (A)("LE")).toString();    
          op = "LT";
        }
        else{
            tmpreg3 = n.f2.accept(this, argu).toString();
        }
        String tmp2 = n.f1.accept(this, argu).toString();
        Checkregspill check2 = new Checkregspill();
        String tmpreg2 = getReg(currProcname,tmp2,0,check2);
        Checkregspill check1 = new Checkregspill();
        String tmpreg1 = getReg(currProcname,tmp1,-1,check1);
        if(check1.isSpilled){
          System.out.println("  MOVE v0 "+op+" "+tmpreg2+" "+tmpreg3+"\n"+"  ASTORE SPILLEDARG "+check1.spill_loc+" v0");
        }
        else{
          System.out.println("  MOVE "+tmpreg1+" "+op+" "+tmpreg2+" "+tmpreg3);
        }
      }
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      String op = "";
      switch(n.f0.which){
        case 0: op = "LE";break;
        case 1: op = "NE";break;
        case 2: op = "PLUS";break;
        case 3: op = "MINUS";break;
        case 4: op = "TIMES";break;
        case 5: op = "DIV";break;
      }
      _ret = (R)op;      
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      String s = (n.f0.accept(this, argu).toString());
      if(argu != null && ((String)argu).equals("LE")){
        if(n.f0.which == 1){
          int sn = Integer.parseInt(s);
          System.out.println("  MOVE v1 "+((Integer)(sn+1)).toString());
          _ret = (R)("v1"); 
          return _ret;
        }
        if(n.f0.which == 0){
          Checkregspill check = new Checkregspill();
          String tmpreg = getReg(currProcname,s,1,check);
          System.out.println("  MOVE v1 1");
          System.out.println("  MOVE v1 PLUS "+tmpreg+" v1");
          _ret = (R)("v1");  
          return _ret;  
        }
        System.out.println("  ERROR!!!");
        System.exit(-1);
      }
      if(n.f0.which == 0){
        Checkregspill check = new Checkregspill();
        String tmpreg = getReg(currProcname,s,1,check);
        // if(check.isSpilled == true){
        //   System.out.println("  ASTORE SPILLEDARG "+check.spill_loc+" "+tmpreg);
        // }
        _ret = (R)tmpreg;
      }
      else if(n.f0.which == 1){
        System.out.println("  MOVE v1 "+s);
        _ret = (R)("v1");
      }
      else{
        _ret = (R)s;
      }
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String t = n.f1.accept(this, argu).toString();
      _ret = (R)("TEMP "+t);
      if(addtmp){
        ((ArrayList<String>)argu).add(_ret.toString());
      }
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      _ret = (R)(n.f0.toString());
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      _ret = (R)(n.f0.toString());
      if(labelflag == 1){
        System.out.print(_ret.toString()+"  ");
      }
      labelflag = 0;
      return _ret;
   }

}
