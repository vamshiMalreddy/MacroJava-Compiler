
// Generated by JTB 1.3.2
//

/*
1 Overriding
2 Class name and variable name same
*/

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   class Tableitem
   {
     R type;
     R scope;
     R varname;
   }

   class Tableitem1
   {
     R type;
     R varname;
     ArrayList paramlist;
   }

   HashMap<R,ArrayList<Tableitem>> SymTab = new HashMap<>();//contains variables in a class
   HashMap<R,ArrayList<Tableitem1>> SymTab1 = new HashMap<>();//contains funtions in a class

   Map<R,R> ParTab = new HashMap<R,R>();//contains direct parents
   Map<R,ArrayList<R>> ParTab1 = new HashMap<R,ArrayList<R>>();//contains all the parents

   R curr_class = null;
   R curr_func = null;
   int x = 0;//iteration
   ArrayList<R> params = new ArrayList<R>();
   ArrayList<R> args = new ArrayList<R>();

   public boolean exist(R id, Tableitem1 ti)
   {
     // System.out.println("g");
     if(SymTab1.containsKey(id))
     {
       ListIterator<Tableitem1> iterator = SymTab1.get(id).listIterator();

        while (iterator.hasNext())
        {
          Tableitem1 it = iterator.next();
          if(it.varname == curr_func && it.type == ti.type && it.paramlist.equals(ti.paramlist))
          {
            return false;
          }
          if(it.varname == curr_func )
          {
            // System.out.println(iterator.next().varname +" "+ ti.varname + " "+curr_func);
            return true;
          }
        }
        return false;
     }
     System.out.println("Symbol not found");
     System.exit(0);
     return false;
   }
   public R find_t_type(R var)
   {

        if(var == (R)"0" || var == (R)"1" || var == (R)"2" || SymTab.containsKey(var))
          return var;
        else
        {
          System.out.println("Symbol not found");
          System.exit(0);
        }
        return null;
   }

   public R find_type(R var)
   {

        if(var == (R)"0" || var == (R)"1" || var == (R)"2" || SymTab.containsKey(var))
          return var;
        else
        {

          ListIterator<Tableitem> iterator = SymTab.get(curr_class).listIterator();

          Tableitem v1 = new Tableitem();
          boolean tr = false;
         while (iterator.hasNext())
         {
           Tableitem v = iterator.next();
           if(v.varname == var && v.scope == curr_func)
           {
             return v.type;
           }
           if(v.varname == var)
           {
             v1 = v;
             tr = true;
           }
         }

         if(tr)
         {
           return v1.type;
         }

         if(ParTab1.containsKey(curr_class))
         {
           ListIterator<R> par_iterator = ParTab1.get(curr_class).listIterator();

           while (par_iterator.hasNext())
           {
             R p = par_iterator.next();
               if(SymTab.containsKey(p))
               {
                 ListIterator<Tableitem> iterator1 = SymTab.get(p).listIterator();

                  while (iterator1.hasNext())
                  {
                    Tableitem v = iterator1.next();
                    if(v.varname == var && v.scope == null)
                    {
                      return v.type;
                    }
                  }
               }
           }
         }
         // System.out.println(var + " " + curr_class);
         // System.out.println(var + " "+ curr_class);
         System.out.println("Symbol not found");
         System.exit(0);
         return (R)"0";
      }
   }

   public boolean is_parent(R pr, R id)
   {
     if(ParTab1.containsKey(id))
     {
       ListIterator<R> par_iterator = ParTab1.get(id).listIterator();
       while (par_iterator.hasNext())
       {
          if(par_iterator.next() == pr)
            return true;
       }
     }
     return false;
   }

   public boolean check(ArrayList<R> al)
   {
     if(al.size() != args.size())
      return false;
     ListIterator<R> argsit = args.listIterator();
     ListIterator<R> alsit = al.listIterator();
     while (alsit.hasNext())
     {
       R it1 = argsit.next();
       R it2 = alsit.next();

       if(it1 != it2 && !is_parent(it2,it1))
       {
         return false;
       }
     }
     return true;
   }

   public R find_functype(R func,R id)
   {
     // System.out.println(func + " "+ id);
      if(SymTab1.containsKey(id))
      {
        ListIterator<Tableitem1> iterator = SymTab1.get(id).listIterator();

        while (iterator.hasNext())
        {
          Tableitem1 f = iterator.next();
          // System.out.println((f).varname + " " + (f).type);
          if(f.varname == func)
          {
            if(check(f.paramlist))
              return f.type;
            else
            {
              System.out.println("Type error");
              System.exit(0);
            }
          }
        }

        if(ParTab1.containsKey(id))
        {
          ListIterator<R> par_iterator = ParTab1.get(id).listIterator();

          while (par_iterator.hasNext())
          {
            R p = par_iterator.next();
            // System.out.println(func + " "+ p);
            if(SymTab1.containsKey(p))
            {
              ListIterator<Tableitem1> iterator1 = SymTab1.get(p).listIterator();

               while (iterator1.hasNext())
               {
                 Tableitem1 v = iterator1.next();
                 // System.out.println(v.varname+ " "+ p);
                 if(v.varname == func)
                 {
                   if(check(v.paramlist))
                     return v.type;
                   else
                   {
                     System.out.println("Type error");
                     System.exit(0);
                   }
                 }
               }
            }

           }
        }

      }


      System.out.println("Symbol not found");
      System.exit(0);
      return (R)"0";
   }

   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return (R)n.tokenImage; }


   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n) {

      if(x == 1)
      {
        for (Map.Entry<R,R> entry : ParTab.entrySet())
        {
          R key = entry.getKey();
          R val = entry.getValue();
          // System.out.print(key + " ");
          while(val != null)
          {
            // System.out.print(val + " ");
            if(!SymTab.containsKey(val))
            {
              System.out.println("Symbol not found");
              System.exit(0);
            }
            else if(is_parent(key,val))
            {
              System.out.println("Type error");
              System.exit(0);
            }
            else
            {
              ParTab1.get(key).add(val);
              val = ParTab.get(val);
            }
          }
          // System.out.println("");
        }
      }
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      x++;
      return _ret;
   }
   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n) {
      R _ret=null;
      n.f0.accept(this);
      R id = n.f1.accept(this);
      curr_class = id;
      if(x == 0)
      {
        SymTab.put(id,new ArrayList<Tableitem>());
        SymTab1.put(id,new ArrayList<Tableitem1>());
      }
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      n.f13.accept(this);
      n.f14.accept(this);
      n.f15.accept(this);
      n.f16.accept(this);
      curr_class = null;
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      R id = n.f1.accept(this);
      curr_class = id;
      // System.out.println(curr_class);
      if(x == 0)
      {
        SymTab.put(id,new ArrayList<Tableitem>());
        SymTab1.put(id,new ArrayList<Tableitem1>());
      }

      // System.out.println(curr_class);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      curr_class = null;
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      R id = n.f1.accept(this);
      n.f2.accept(this);
      R pr = n.f3.accept(this);
      curr_class = id;
      // System.out.println(curr_class);
      if(id == pr)
      {
        System.out.println("Type error");
        System.exit(0);
      }
      if(x == 0)
      {
        SymTab.put(id,new ArrayList<Tableitem>());
        SymTab1.put(id,new ArrayList<Tableitem1>());
        ParTab1.put(id,new ArrayList<R>());
        ParTab.put(id,pr);
      }
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      curr_class = null;
      return _ret;
   }

   /**SymTab
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n) {
      R _ret=null;
      R t = n.f0.accept(this);
      R v = n.f1.accept(this);
      n.f2.accept(this);
      if(x == 0)
      {
        Tableitem ti = new Tableitem();
        ti.type = t;
        ti.scope = curr_func;
        ti.varname = v;
        ListIterator<Tableitem> iterator = SymTab.get(curr_class).listIterator();

        while(iterator.hasNext())
        {
          Tableitem it = iterator.next();
          if(it.varname == v && it.scope == curr_func)
          {
            System.out.println("Type error");
            System.exit(0);
          }
        }

        SymTab.get(curr_class).add(ti);
      }
      if(x==1)
      {
        R dum = find_t_type(t);
      }
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      R t = n.f1.accept(this);
      R id = n.f2.accept(this);
      curr_func = id;
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);

      Tableitem1 ti = new Tableitem1();
      ti.type = t;
      ti.varname = id;
      ti.paramlist = new ArrayList();
      ti.paramlist = (ArrayList)params.clone();
      params.clear();
      /*Add function to the class*/
      if(x == 0)
      {
        ListIterator<Tableitem1> iterator = SymTab1.get(curr_class).listIterator();

        while(iterator.hasNext())
        {
          if(iterator.next().varname == curr_func)
          {
            System.out.println("Type error");
            System.exit(0);
          }
        }
        // System.out.println(ti.varname + " "+ ti.type);
        SymTab1.get(curr_class).add(ti);
      }

      /*Function overloading check*/
      if(x == 1)
      {

        // System.out.println(curr_func + " " +curr_class);
        if(ParTab1.containsKey(curr_class))
        {
           ListIterator<R> iterator = ParTab1.get(curr_class).listIterator();

           while(iterator.hasNext())
           {
             if(exist(iterator.next(),ti))
             {

               System.out.println("Type error");
               System.exit(0);
             }
           }
        }
      }
      n.f6.accept(this);
      n.f7.accept(this);

      n.f8.accept(this);
      // System.out.println("Enter ParTab");
      n.f9.accept(this);
      R re = n.f10.accept(this);
      if(x == 1)
      {
        if(find_type(re) != find_t_type(t) && !is_parent(find_t_type(t),find_type(re)))
        {
          System.out.println("Type error");
          System.exit(0);
        }
      }
      n.f11.accept(this);
      n.f12.accept(this);
      //SymTab.get(curr_class).removeIf(n -> (n.scope == curr_func));
      curr_func = null;
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n) {
      R _ret= null;
      R t = n.f0.accept(this);
      R v = n.f1.accept(this);
      params.add(t);

      if(x == 0)
      {
        Tableitem ti = new Tableitem();
        ti.type = t;
        ti.scope = curr_func;
        ti.varname = v;
        ListIterator<Tableitem> iterator = SymTab.get(curr_class).listIterator();

        while(iterator.hasNext())
        {
          Tableitem it = iterator.next();
          if(it.varname == v && it.scope == curr_func)
          {
            System.out.println("Type error");
            System.exit(0);
          }
        }

        SymTab.get(curr_class).add(ti);
      }
      if(x == 1)
      {
        R dum = find_t_type(t);
      }
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n) {
      R _ret=null;

      return n.f0.accept(this);
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return (R)"2";
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n) {
      R _ret=null;

      return (R)"0";
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n) {
      R _ret=null;

      return (R)"1";
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n) {
      R _ret=null;
      R id = n.f0.accept(this);
      n.f1.accept(this);
      R ex = n.f2.accept(this);
      n.f3.accept(this);
      if(x == 1)
      {

        if(!is_parent(find_type(id),find_type(ex)) && find_type(id) != find_type(ex))
        {
          // System.out.println(id + " "+ ex);
          System.out.println("Type error");
          System.exit(0);
        }
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n) {
      R _ret=null;
      R id = n.f0.accept(this);
      n.f1.accept(this);
      R ex1 = n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      R ex2 = n.f5.accept(this);
      if(x == 1)
      {
        // System.out.println(id + " "+find_type(id) + " "+ find_type(ex1)+ " "+ find_type(ex1));
        if(find_type(id) != (R)"2" || find_type(ex1) != (R)"1" || find_type(ex2) != (R)"1")
        {
          System.out.println("Type error");
          System.exit(0);
        }
        n.f6.accept(this);
      }
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      R ex = n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      if(x == 1)
      {
        if(find_type(ex) != (R)"0")
        {
          System.out.println("Type error");
          System.exit(0);
        }
      }
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      R ex = n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);

      if(x == 1)
      {
        if(find_type(ex) != (R)"0")
        {
          System.out.println("Type error");
          System.exit(0);
        }
      }

      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      R ex = n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);

      if(x == 1)
      {
        if(find_type(ex) != (R)"0")
        {
          System.out.println("Type error");
          System.exit(0);
        }
      }

      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      R ex = n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      if(x == 1)
      {
        if(find_type(ex) != (R)"1")
        {
          System.out.println("Type error");
          System.exit(0);
        }
      }
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n) {
      R _ret=null;

      return n.f0.accept(this);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n) {
      R _ret=null;
      R pe1 = n.f0.accept(this);
      n.f1.accept(this);
      R pe2 = n.f2.accept(this);
      if(x == 1)
      {
        if(find_type(pe1) != (R)"0" || find_type(pe2)!= (R)"0")
        {
          System.out.println("Type error");
          System.exit(0);
        }
      }

      return (R)"0";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n) {
     R _ret=null;
     R pe1 = n.f0.accept(this);
     n.f1.accept(this);
     R pe2 = n.f2.accept(this);
     if(x == 1)
     {
       if(find_type(pe1) != (R)"0" || find_type(pe2)!= (R)"0")
       {
         System.out.println("Type error");
         System.exit(0);
       }
     }
     return (R)"0";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n) {
     R _ret=null;
     R pe1 = n.f0.accept(this);
     n.f1.accept(this);
     R pe2 = n.f2.accept(this);
     if(x == 1)
     {
       if(find_type(pe1) != (R)"1" || find_type(pe2) != (R)"1")
       {
         System.out.println("Type error");
         System.exit(0);
       }
     }
     return (R)"0";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n) {
     R _ret=null;
     R pe1 = n.f0.accept(this);
     n.f1.accept(this);
     R pe2 = n.f2.accept(this);
     if(x == 1)
     {
       if(find_type(pe1) !=  find_type(pe2))
       {
         System.out.println("Type error");
         System.exit(0);
       }
     }

     return (R)"0";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n) {
     R _ret=null;
     R pe1 = n.f0.accept(this);
     n.f1.accept(this);
     R pe2 = n.f2.accept(this);

     if(x == 1)
     {
       if(find_type(pe1) != (R)"1" || find_type(pe2) != (R)"1")
       {
         System.out.println("Type error");
         System.exit(0);
       }
     }

     return (R)"1";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n) {
     R _ret=null;
     R pe1 = n.f0.accept(this);
     n.f1.accept(this);
     R pe2 = n.f2.accept(this);

     if(x == 1)
     {
       if(find_type(pe1) != (R)"1" || find_type(pe2) != (R)"1")
       {
         System.out.println("Type error");
         System.exit(0);
       }
     }
     return (R)"1";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n) {
     R _ret=null;
     R pe1 = n.f0.accept(this);
     n.f1.accept(this);
     R pe2 = n.f2.accept(this);

     if(x == 1)
     {
       if(find_type(pe1) != (R)"1" || find_type(pe2) != (R)"1")
       {
         System.out.println("Type error");
         System.exit(0);
       }
     }
     return (R)"1";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n) {
     R _ret=null;
     R pe1 = n.f0.accept(this);
     n.f1.accept(this);
     R pe2 = n.f2.accept(this);

     if(x == 1)
     {
       if(find_type(pe1) != (R)"1" || find_type(pe2) != (R)"1")
       {
         System.out.println("Type error");
         System.exit(0);
       }
     }
     return (R)"1";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n) {
      R _ret=null;
      R pe1 = n.f0.accept(this);
      n.f1.accept(this);
      R pe2 = n.f2.accept(this);

      if(x == 1)
      {
        if(find_type(pe1) != (R)"2" || find_type(pe2) != (R)"1")
        {
          System.out.println("Type error");
          System.exit(0);
        }
      }

      n.f3.accept(this);
      return (R)"1";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n) {
      R _ret=null;
      R pe = n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      if(x == 1)
      {
        if(find_type(pe) != (R)"2")
        {
          System.out.println("Type error");
          System.exit(0);
        }
      }
      return (R)"1";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n) {
      R _ret=null;
      R pe = n.f0.accept(this);
      n.f1.accept(this);
      R func = n.f2.accept(this);

      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);

      if(x == 1)
      {
        R k = find_functype(func,find_type(pe));
        args.clear();
        return k;
      }

      else
        return null;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n) {
      R _ret=null;
      R ex = n.f0.accept(this);
      if(x == 1)
        args.add(find_type(ex));
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n) {
      R _ret=null;
      n.f0.accept(this);
      R ex = n.f1.accept(this);
      if(x == 1)
        args.add(find_type(ex));
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n) {
      R _ret=null;

      return n.f0.accept(this);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      return (R)"1";
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      return (R)"0";
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      return (R)"0";
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n) {
      R _ret=null;
      return n.f0.accept(this);
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n) {
      R _ret=null;
      n.f0.accept(this);
      return curr_class;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      R ex = n.f3.accept(this);
      n.f4.accept(this);
      if(x == 1)
      {
        if(find_type(ex) != (R)"1")
        {
          System.out.println("Type error");
          System.exit(0);
        }
      }
      return (R)"2";
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n) {
      R _ret=null;
      n.f0.accept(this);
      R id = n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      if(x == 1)
        return find_t_type(id);
      else
        return id;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n) {
      R _ret=null;
      n.f0.accept(this);
      R ex = n.f1.accept(this);
      if(x == 0)
        return _ret;
      else
      {
        if(find_type(ex) != (R)"0")
        {
          System.out.println("Type error");
          System.exit(0);
        }
        return (R)"0";
      }
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n) {
      R _ret=null;
      n.f0.accept(this);
      R ex = n.f1.accept(this);
      n.f2.accept(this);
      if(x == 0)
        return _ret;
      else
        return ex;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }
}
